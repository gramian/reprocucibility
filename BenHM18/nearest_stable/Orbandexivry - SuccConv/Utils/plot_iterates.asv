function [] = plot_iterates(mat,isdiscrete,varargin)
%plot_iterates(mat,e_lon,isdiscrete,roc,savetype,path,faxe,zxlim,zylim)
%plot the iterates saved in the matrix mat depending on whether it contains
%continuous or discrete data, and whether it is real or complex. The
%iterates will be ploted in the complex plane whenever one of the data is
%complex.
%
%There are four types of calls :
%        plot_iterates(mat,isdiscrete)
%        plot_iterates(mat,isdiscrete,e_lon,roc,savetype,path)
%        plot_iterates(mat,isdiscrete,faxe,zxlim,zylim)
%        plot_iterates(mat,isdiscrete,e_lon,roc,savetype,path,faxe,zxlim,zy
%        lim)
%
%Input : mat       : A n by m matrix containing n iterates of dimension m
%                    (or rather sqrt(m) by sqrt(m) reshaped in a line
%                    vector)
%        isdiscrete: the value of isdiscrete used for the resolution, 1 if
%                    the problem is discrete, 0 otherwise. (default :0)
%        e_lon     : the value of e_lon used for the resolution (default:0)
%        roc       : 1 if the rate of convergence must be plotted
%                    (default:
%        savetype  : the type of layout needed, it can be 'article',
%                    'poster', 'personnalized', 'default' or 'none'
%        path      : The path were the plot must be saved, if savetype is
%                    different from 'none'.
%        namefig   : If savetype is active, an optional name for the
%                    figure. Note that the name is appended with the
%                    savetype option name.
%        faxe      : if different than the current figure, a valide graphic
%                    handle.
%        zxlim     : if specified, the limit of the X axes.
%        zylim     : if specified, the limit of the Y axes.
%
%History : 24/09/2010 : polynomial processing added
%          05/01/2011 : Making of the header + adding the variable
%          'faxe','zxlim','zylim'
%          17/01/2011 : bug with an index
%          04/08/2011 : more features for the 'article' style, the kind of
%                       marker and their color can be easily modified.  In
%                       this mode, the final point is replotted above
%                       everything at the end (in white, non modify-able)
%          28/08/2012 : Add the possibility of receiving the name of the
%                       file in which we save the figure
%Last modified : 28/08/2012

%% preprocessing
%default values
if nargin < 3
    e_lon = 0;
end
if nargin < 4
    roc = 0;
end
if nargin < 5
    savetype = 'none';
end
if nargin < 6
    path = '';
end
if nargin < 7
    namefig ='';
end
if nargin <10
    faxe = gca;
    zxlim = 0;
    zylim = 0;
end

if nargin == 5
    faxe = varargin{1};
    zxlim = varargin{2};
    zylim = varargin{3};
elseif nargin == 6
    e_lon = varargin{1};
    roc = varargin{2};
    savetype = varargin{3};
    path = varargin{4};
elseif nargin == 7
    e_lon = varargin{1};
    roc = varargin{2};
    savetype = varargin{3};
    path = varargin{4};
    namefig = varargin{5};
elseif nargin == 10
    e_lon = varargin{1};
    roc = varargin{2};
    savetype = varargin{3};
    path = varargin{4};
    namefig = varargin{5};
    faxe = varargin{6};
    zxlim = varargin{7};
    zylim = varargin{8};
end
if (nargin >7 && nargin < 10) || nargin > 10
    error('Wrong number of input arguments in plot_iterates')
end

%checking the validity of the inputs
if ~isscalar(e_lon) || ~isreal(e_lon)
    error('Input argument "e_lon" must be a real scalar')
end
if all(isdiscrete == 1) && all(isdiscrete==0)%'all' set so that it can deal with strings
    error('Input argument "isdiscrete" must be 1 or 0')
end
if ~ischar(savetype)%the validity of the string is checked later on
    error('Input argument "savetype" must be a string')
end
if ~ischar (path)%the validity of the path is checked later on
    error('Input argument "path" must be a string')
end
if ~ischar (namefig)%the validity of the path is checked later on
    error('Input argument "namefig" must be a string')
end
if ~ishandle(faxe)
    error('Input argument "faxe" must be a valid graphic handle')
end
if nargin == 5 || nargin ==10
    if any(size(zxlim)~=[1 2])|| any(size(zylim)~=[1 2])
        error('Input arguments "zxlim" and "zylim" must be of size 1 by 2')
    end
end


%introducing markers type for the article type
iterate_marker_default = 'o';
startingpoint_marker_default ='s';
originalpoint_marker_default = 'h';
initblacklevel = 0.75;% 0 is full black, 1 starts with white

%initiating variables for the colors
axes_color = [];
startingpoint_color = [];
originalpoint_color = [];
converg_color = [];
axes_color_default = [0 0 0];
%iterate_color_default is set later in the file because it needs a
%computation
startingpoint_color_default = [0 0 1];
originalpoint_color_default = [1 0 0];
converg_color_default = [0 0 1];


%overwritting default values for colors and parameters.
Stable_param;

%setting default values for the undefined colors
if isempty(axes_color)
    axes_color = axes_color_default;
end
if isempty(startingpoint_color)
    startingpoint_color = startingpoint_color_default;
end
if isempty(originalpoint_color)
    originalpoint_color = originalpoint_color_default;
end
if isempty(converg_color)
    converg_color = converg_color_default;
end



%Checking the properies of savetype
%savetype written in lower case
savetype = lower(savetype);

%setting parameters for the initial plots
switch savetype
    case 'article'
        width  = w_artcl;
        height = h_artcl;
        cent   = cent_artcl;
        showax = showax_artcl;
        ms     = ms_artcl;
        fs     = fs_artcl;
        lw     = lw_artcl;
        ext   = ext_artcl;
    case 'poster'
        width  = w_poster;
        height = h_poster;
        cent   = cent_poster;
        showax = showax_poster;
        ms = ms_poster;
        fs = fs_poster;
        lw = lw_poster;
        ext = ext_poster;
    case 'personnalized'
        width  = w_perso;
        height = h_perso;
        cent   = cent_perso;
        showax = showax_perso;
        ms = ms_perso;
        fs = fs_perso;
        lw = lw_perso;
        ext = ext_perso;
    case 'default'
        width  = 0;
        height = 0;
        cent   = 1;
        showax = 1;
        ms = 5;
        fs = 14;
        lw = 1.4;
        ext = 'pdf';
    case 'none'
        width  = 0;
        height = 0;
        cent   = 0;
        showax = 1;
        ms = 5;
        fs = 14;
        lw = 1.4;
        ext = '';
    otherwise
        error('Save type does not exist')
end





%Checking the validity of the path
if strcmp(savetype,'none')~=1
    if isempty(path)
        error('plotevol:path','No path was given')
    elseif ~isdir(path)
        error('plotevol:isdir','The given path is not a valid directory')
    elseif ~strcmp('\',path(end))%correction if the path does not a backslash at the end
        path =sprintf('%s%s',path,'\');
    end
end

%setting default name for the fig
if isempty(namefig)&& strcmp(savetype,'none')~=1
    if ~isempty(Sol_filename)
        namefig = Sol_filename;
    else
        error('No name was given for the figure, please choose the following: A default name value for "Sol_filename" can be set in Stable_param, or a name can be provided along the data, type "help plot_iterates" for more help.')
    end
end


%Checking the validity of the content in mat.
n = size(mat,1);
ncol= size(mat,2);
if n == 0
    warning('Plotevol:emptymatrix','The input matrix is empty, nothing to plot')
    return
end

index = 2;%at which line is the starting point
if n == 1
    %there's not enough results to plot and this causes bugs
    warning('Only one data, plotting it as a starting point')
    %     return
    index = 1;
end

%if the number of points is big then prints only 50 instances or less
if n > 100
    numtokeep = 50;
    J = [1:9];
    J = [J round(logspace(1,log10(n),numtokeep-length(J)))];
%     r = mod(n,10);
%     J = [3:10:n]; %index of the points that are going to be printed
%     if r ~=3
%         J = [J,n];
%     end
%     J = [1 2, J];%line with the original eigenvalues and starting point
    mat = mat(J,:);
    n = length(J);
end

%Sensing the complex nature of the data
complex =0;
if  any(any(imag(mat)))
    complex = 1;
end

%Reordering for a special case for the iterates of a normal matrix that had
%real iterates but whosse columns where exchanged from time to time
%(important for the convergence rate) (not really used anymore)
% if ncol == 6
%     mat = Reorder_stock_6by6normal_cplxroots(mat);
% end

%

%% processing
%initialization (overwriting current axes by handle)
axes(faxe);


%basic setting
set(gca,'FontSize',fs)
if strcmp(savetype,'none')~=1
    set(gca,'color','none')%makes the background of the figure invisible
end

%set the color of the axes (there will also be the line splitting the
%complex plane)
set(gca,'Xcolor',axes_color,'Ycolor',axes_color)

%label
if complex
    if isdiscrete
        xlabel('Re(z)','FontSize',fs)
        ylabel('Im(z)','FontSize',fs)
    else
        xlabel('Re(s)','FontSize',fs)
        ylabel('Im(s)','FontSize',fs)
    end
else
    xlabel('i','FontSize',fs)
    ylabel('Re(\lambda_i)','FontSize',fs)
end
hold on;
box on;

%second part: plot starting point

if complex
    p1 = plot(real(mat(index,:)),imag(mat(index,:)),'bo','markersize',ms,'linewidth',lw,'markeredgecolor',startingpoint_color);
    if strcmp(savetype,'article')||strcmp(savetype,'poster')
        set(p1,'marker',startingpoint_marker_default);
        set(p1,'markeredgecolor',startingpoint_color);
    end
else
    plot([1:ncol] ,mat(index,:),'bo','markersize',ms,'linewidth',lw)
end


%third part: actualization of the Bi
for j = 3: n
    if (isempty(iterate_color)|| strcmp(savetype,'article')) ||...
            (size(iterate_color,1)<n-2 && size(iterate_color,1)~=2) || size(iterate_color,2)~=3)
        %ensuring that all points are visible by setting a minimal level of
        %grey
        co =initblacklevel*(1-(j-2)/(n-2));
        co = [co co co]; %#ok<AGROW>
    else
        if size(iterate_color,1) == 2
            
        end
        co = iterate_color(j-2,:); %#ok<COLND>
    end
    if complex
        p2 = plot(real(mat(j,:)),imag(mat(j,:)),'o','MarkerSize',ms,'MarkerFaceColor', co,'MarkerEdgeColor', co);
        if strcmp(savetype,'article')
            set(p2,'marker',iterate_marker_default);
        end
    else
        plot([1:ncol],mat(j,:),'o','MarkerSize',ms,'MarkerFaceColor', co,'MarkerEdgeColor', co)
    end
end

%fourth part: reploting initial problem and plotting the boundary of
%stability

if n > 1
    if complex
        %eigenvalues of the initial problem
        p3 = plot(real(mat(1,:)),imag(mat(1,:)),'ro','markersize',ms,'linewidth',lw,'MarkerEdgeColor',originalpoint_color);
        if strcmp(savetype,'article')
            set(p3,'marker', originalpoint_marker_default);
            set(p3,'markersize',ms+5);
            set(p3,'Markerfacecolor',[0 0 0]);
            set(p3,'MarkerEdgecolor',[0 0 0]);
        end
    else
        %eigenvalues of the initial problem
        plot([1:ncol],mat(1,:),'ro','markersize',ms,'linewidth',lw)
    end
end

if complex
    %boundary of the stability domain
    if ~isdiscrete
        h1 = line([0 0],get(gca,'ylim'));
        h2 = line([e_lon e_lon],get(gca,'ylim'));
    else
        x = [0:0.1:360];
        h1 = plot(cosd(x),sind(x));
        h2 = plot((1+e_lon)*cosd(x),(1+e_lon)*sind(x));
    end
    set(h1,'Color',axes_color,'Linewidth',lw)
    set(h2,'Color',axes_color,'Linewidth',lw,'Linestyle','--')
else
    %boundary of the stability domain
    if ~isdiscrete
        h1 = line([0 ncol+1],[0 0]);
        h2 = line([0 ncol+1],[e_lon e_lon]);
    else
        h1 = line([0 0; ncol+1 ncol+1],[1 -1;1 -1]);
        h2 = line([0 0; ncol+1 ncol+1],[1+e_lon -1-e_lon;1+e_lon -1-e_lon]);
    end
    set(h1,'Color',axes_color,'Linewidth',lw)
    set(h2,'Color',axes_color,'Linewidth',lw,'Linestyle','--')
    set(gca,'Xtick',[1:ncol]) %#ok<NBRAK>
    set(gca,'Xlim',[0 ncol+1])
end

if complex && strcmp(savetype,'article')
    %replotting the final solution(iterate) above everything
    p4 = plot(real(mat(n,:)),imag(mat(n,:)),'o','MarkerSize',ms-2,'markerfacecolor',[0.999 0.999 0.999],'markeredgecolor',[0.999 0.999 0.999]);
end

%Axes limits and ticks

if ~showax %used to display the unit circle/imaginary axis properly, otherwise it is cut
        xlim = get(gca,'Xlim');
        ylim = get(gca,'Ylim');
        set(gca,'Xlim',[xlim(1)-0.1 xlim(2)+0.1]);
        set(gca,'Ylim',[ylim(1)-0.1 ylim(2)+0.1]);
end
    
if complex
    if ~isscalar(zxlim)
        set(gca,'Xlim',zxlim,'XLimMode','manual');
    end
    if ~isscalar(zylim)
        set(gca,'Ylim',zylim,'YLimMode','manual');
    end
else
    %nothing special
end

hold off;

if strcmp(savetype,'none') ~= 1
    set_plot(width,height,cent,showax)
end

%refresh after resizing
if complex
    if ~isdiscrete
        %in case the ticks has changed replot the line
        set(h1,'Ydata',get(gca,'Ylim'));
        set(h2,'Ydata',get(gca,'Ylim'));
    else
        if isscalar(zxlim) && isscalar(zylim)
            axis equal
        end
    end
end


%printing the file
if strcmp(savetype,'none') ~= 1
    switch ext
        case 'pdf'
            print(gcf,'-dpdf','-r300',sprintf('%s%s%s%s',path,namefig,savetype,'.pdf'))
        case 'eps'
            print(gcf,'-depsc2','-r300',sprintf('%s%s%s%s',path,namefig,savetype,'.eps'))
        case 'svg'
            xlim = get(gca,'Xlim');
            ylim = get(gca,'Ylim');
            prop = 20;
            if complex
                %add some WIDTH AND HEIGHT so that the points on the
                %boundary will be printed in the svg
                interval1 = xlim(2) - xlim(1);
                addoff1 = interval1/prop;
                interval2 = ylim(2) - ylim(1);
                addoff2 = interval2/prop;
                set(gca,'Xlim',[xlim(1)-addoff1 xlim(2)+addoff1]);
                set(gca,'Ylim',[ylim(1)-addoff2 ylim(2)+addoff2]);

                %in case the ticks has changed replot the line
                if ~isdiscrete
                    set(h1,'Ydata',get(gca,'Ylim'));
                    set(h2,'Ydata',get(gca,'Ylim'));
                end
            else
                %add some space at the BOTTOM so that the points on the frame will
                %be printed in the svg
                interval = ylim(2) - ylim(1);
                addoff = interval/prop;
                set(gca,'Ylim',[ylim(1)-addoff ylim(2)]);
            end
            plot2svg(sprintf('%s%s%s%s',path,namefig,savetype,'.svg'),gcf)
        otherwise
            error('Format file is not supported')
    end
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%ploting the rate of convergence
%the convergence is determined from the norm of the matrix not from its
%eigenvalues.
if roc
    converg = StableRoc();
    converg(end) = [];

    %plotting the convergence for each eigenvalue
    figure;
    semilogy(converg,'o','Markersize',ms,'linewidth',lw,'Markeredgecolor',converg_color)
    hold on;
    semilogy(converg,'linewidth',lw,'color',converg_color)
    set(gca,'Fontsize',fs,'Xcolor',axes_color,'Ycolor',axes_color)
    xlabel('Iterations')

    %layout and printing
    if strcmp(savetype,'none') ~= 1
        set_plot(width,height,cent)

        switch ext
            case 'pdf'
                print(gcf,'-dpdf','-r300',sprintf('%s%s%s%s',path,Conv_filename,savetype,'.pdf'))
            case 'svg'
                xlim = get(gca,'Xlim');
                ylim = get(gca,'Ylim');
                prop = 20;

                %add some WIDTH AND HEIGHT so that the points on the
                %boundary will be printed in the svg
                interval1 = xlim(2) - xlim(1);
                addoff1 = interval1/prop;
                interval2 = ylim(2) - ylim(1);
                addoff2 = interval2/prop;
                set(gca,'Xlim',[xlim(1)-addoff1 xlim(2)]);
                set(gca,'Ylim',[ylim(1) ylim(2)+addoff2]);

                %printing in svg format
                plot2svg(sprintf('%s%s%s%s',path,Conv_filename,savetype,'.svg'),gcf)
            otherwise
                error('Format file is not supported')
        end
    end
end

return

