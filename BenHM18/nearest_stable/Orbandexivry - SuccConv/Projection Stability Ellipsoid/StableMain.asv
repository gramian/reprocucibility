function [Bi]= StableMain(A,S,isdiscrete,compute,verbose,e_lon,roc,savf,path)
%[Bi]= StableMain(A,S,isdiscrete,compute,verbose,e_lon,roc,savf,path)
%StableMain find the closest stable matrix to A in the sense of the
%frobenius norm without explicitly computing the eigenvalues.
%
%   [Bi] = StableMain(A,S,isdiscrete,compute,verbose) returns a matrix Bi
%          of the same size than A but with stable eigenvalues. If A has
%          some of its eigenvalues stable, those eigenvalues can be
%          changed. The matrix Bi is computed as the local minimum of an
%          optimization problem.
%
%          The algorithm also tries to keep Bi in the same form than A
%          (diagonal, hermitian, normal,...).
%
%          The algorithm stops when the change between two successive
%          iterations gets smaller than 1e-4(default). If this criterion
%          cannot be satisfied then the algorithm exits with an error.
%
%   Input: A : a square matrix
%          isdiscrete : 1 if A describes a discrete time dynamic system
%                       0 if A describes a continuous time dynamic system
%          compute    : if 1 the algorithm will compute and keep track of
%          the eigenvalues of the system in the file stock.mat. In that
%          file the first line gives the original eigenvalues, the second
%          line gives the eigenvalues of the starting point matrix S ( =
%          -eye(n) by default), the following lines gives the evolution of
%          the eigenvalues. A graph showing the computed values is produced
%          as well. (Blue circles : starting point, red circles : initial
%          eigenvalue, darkness gives the evolution of the iterations).
%          verbose : if 1 print information during the computation
%          S : a starting point matrix whose dimension is equal to A's and
%          whose eigenvalues must be stable.( =-eye(n)+e_lon by default)
%          e_lon : the "distance" (+ or -) from the stability boundary at
%          which we want the 'stabilized' eigenvalues to lie inside the
%          stability region. 
%       if compute == 1
%          roc  : if 1 gives a semilog plot of the convergence of each eigenvalue
%          savf : if 'None' will not save the graphs, otherwise will save
%          them after formatting in the the directory given by path. Other
%          values for savf are: 'Article', 'Poster', 'Personnalized' or
%          'Default'. Values linked to those keywords can be edited in
%          Stable_param.m.
%          path : the path to an existing directory.
%
%
%  Output: Bi : a stable matrix whose eigenvalues are the closest to A's.
%
%History : 05/01/2011 : Cleaning of the unused code from the file, a backup
%                       exists which features a history of the resolution
%                       method 'Find_PH'.
%

%adding the Utils directory to matlab path.
d = pwd;
smotd = length(d);
cd ..
s =pwd;
smots = length(s);
d = d(smots+2:smotd);
cd(d);
s = strcat(s,'\Utils');
addpath(s);
ss = strcat(s,'\plot2svg');
addpath(ss);
ss = strcat(s,'\USVD');
addpath(ss);

%preprocessing
if nargin < 2
    S = [];
end
if nargin < 3
    isdiscrete = 0;
end
if nargin < 4
    compute = 1;
end
if nargin < 5
    e_lon = 0;
end
if nargin < 8
    roc  = 0;%rate of convergence
    savf = 'none';%type of save
    path = '';
end
if nargin < 9
    verbose = 0;
end
if nargin == 0
    StableData()
end
if (nargin > 5 && nargin < 8 ) || nargin > 9
    error('-> Wrong number of input arguments')
end


if strcmpi(savf,'none')~= 1
    if ~isdir(path)
        error('The given directory does not exist')
    end
end

if size(A,1)== size(A,2)
    n = size(A,1);
else
    error('-> Input matrix A is not square');
end

tic

%initialization and parameters
gamma = norm(A,'fro');
itere = 0;
NbItereMax = 10e3;
la = 1;

%  The problem is normed 
A = A/gamma;
S = S/gamma;
e_lon = e_lon/gamma;
tol = 1e-3/gamma;%don't put it smaller than 1e-10 otherwise it might be under machine precision in its search of lambda
if tol < 1e-10
    tol = 1e-10;
    warning('Cannot set too small relative accuracy :relative accuracy set to 1e-10');
end

%saving the iterations
if compute
    stock = [];
    Bmat = [];
    [stock, Bmat] = stockIt(stock,Bmat,A);
    objval = [];
end

%taking a starting point B0 to initialize the algorithm
Bi = FindStartingPoint(A,e_lon,gamma,isdiscrete,S);
if compute
    [stock, Bmat] = stockIt(stock,Bmat,Bi);
    objval = [objval; norm(A-Bi,'fro')];
end

%entering the loop that will iterate to find the best B
H = A-Bi;%initial step between A and the starting point
Dp = speye(size(H));

try
    while ((norm(H,'fro') > tol)&& (itere < NbItereMax))

        %         if norm(H,'fro') < 1e-1%for debug use
        %             display('under first tol')
        %         end

        %counting iteration
        itere = itere + 1;

    %---%Find best P and Q
        [Dp,Dq,T,invT] = FindPQ(Bi,n,e_lon,gamma,isdiscrete,verbose);
%         [Dp,Dq,T,invT] = FindPQ_USVD(Bi,n,e_lon,isdiscrete,verbose);

    %---%Find the best lambda
%         [la] = FindLambda(A,Bi,Dp,Dq,T,invT,la/50,n,tol/1000,isdiscrete,verbose);
%         [la] = FindLambda_USVD(A,Bi,Dp,Dq,T,invT,la/50,n,tol/1000,isdiscrete,verbose);

    %---%Solving the main problem
        %FindPH :Created : 05/05/10. Solves in a direct way the main
        %equation in order to find PH.
        %Last Update : 05/05/10
%         [H1] = FindPH(Dp,Dq,Bi,A,T,invT,n,la,isdiscrete,gamma,verbose);
        %FindPH_USVD. Created 10/02/2010. It does exactly the same
        %operation than FindPH but when T and iT are computed with the USVD
        %method. Not for use with matrices with complex coefficients but
        %otherwise works ok of FindLambda_USVD and FindPQ_USVD are used.
        %Last update : 10/02/2010
        %         [H2] = FindPH_USVD(Dp,Dq,Bi,A,T,invT,n,la,isdiscrete,verbose);
        %FindPH_hermitian : compute in a direct way the solution for
        %hermitian matrices. NOT FOR USE, the math is incorrect.
        %         [H2] = FindPH_hermitian(Dp,Dq,Bi,A,T,invT,n,la,isdiscrete,verbose);
        %FindPH_HA : Separates the hermitian and skew-hermitian parts of
        %H and of the equation. NOT FOR USE, the math is incorrect.
        %         [H3] = FindPH_HA(Dp,Dq,Bi,A,T,invT,n,la,isdiscrete,verbose);
        %FindPH_HA_2 : In this routine, the math is correct (for hermitian
        %and normal matrices) but some code has been added in an attempt to
        %kill round-off errors. This code should easily work for hermitian
        %and most normal matrices. 
        %         [H4] = FindPH_HA_2(Dp,Dq,Bi,A,T,invT,n,la,isdiscrete,verbose);
        %FindPH_HA_3 : It consists of the same routine than FindPH_HA_2 but
        %with a reformulation of the problem (coefficients are passed on
        %the other side of the equation). The code for the round-off errors
        %has been removed. Results are thought to be the same as
        %findph_ha_2.
        %         [H5] = FindPH_HA_3(Dp,Dq,Bi,A,T,invT,n,la,isdiscrete,verbose);%produce exactly the same results as H4
        %FindPH_HA_USVD : Same as findph_ha_3 but adapted for the use of
        %the USVD (T and invT are obtained via the use of USVD). The use of
        %T and iT has changed also. Best routine with hermitian and normal matrices.
        %Last update : 11/2009
        %         [H6] = FindPH_HA_USVD(Dp,Dq,Bi,A,T,invT,n,la,isdiscrete,verbose);
        %FindPH_HA_USVD_2: Is an attempt to make the routine work for
        %general matrices. It fails in such an attempt but works with
        %hermitian and normal matrices. The ordering of the operation changes
        %from the previous version : the matrices are first split in their
        %hermitian and skew-hermitian components before being applied a
        %coordinate basis change.
%         [H7] = FindPH_HA_USVD_2(Dp,Dq,Bi,A,T,invT,n,la,isdiscrete,verbose);
        %FindPH_HA_USVD_3: Is an attempt to make the routine work for
        %general matrices. Failed.
%         [H8] = FindPH_HA_USVD_3(Dp,Dq,Bi,A,T,invT,n,la,isdiscrete,verbose);
        %FindPH_approx : Does not try to solve directly the equation of the
        %projection on the ellipsoid but rather tries to find an
        %approximation to it.
        %Creation :08/06/2010 Last update:21/06/2010
%         [H9] = FindPH_approx(Dp,Dq,Bi,A,T,invT,n,la,isdiscrete,e_lon,gamma,verbose);
        %FindPH_approx_normed : Does exactly as FindPH_approx except it 
        %norms 'G', the derivative of the distance to A. Since the two 
        %derivatives need only to be equal in direction, not in norm. This 
        %correspond at looking for a point on an ellipsoid of unit radius. 
        %It also features a stopping criterion based on an inner ellipsoid 
        %of smaller radius.
        %Creation :12/07/2010 Last update:24/08/2010
%         [H10] = FindPH_approx_normed(Dp,Dq,Bi,A,T,invT,n,la,isdiscrete,e_lon,gamma,verbose);
        %FindPH_approx_updated : The stopping criterion based on the inner
        %ellipsoid was achieved only for the discrete case. The file has
        %also been cleaned of debug operations.
        %Creation :23/09/2010 Last update:23/09/2010
        [H11] = FindPH_approx_updated(Dp,Dq,Bi,A,T,invT,n,la,isdiscrete,e_lon,gamma,verbose);
        H = H11;
        
%                 diffH = H10-H9
%                 H10/H9
%                 norm(diffH,'fro')/norm(H,'fro')
        %         DiffH2H1 = H5-H4 %#ok<NASGU>
        %         h_1 = (H3+H3')/2;
        %         h_2 = (H4+H4')/2;
        %         diffh2h1 = h_2-h_1
        %         a_1 = (H3-H3')/2;
        %         a_2 = (H4-H4')/2;
        %         diffa2a1 = a_2-a_1

    %---%Updating Bi
        Biprev = Bi;
        Bi = Bi+H;
        

        %         absBi = abs(Bi-Bi')

    %---%saving the evolution of the solution
        if compute
            [stock,Bmat] = stockIt(stock,Bmat,Bi);
            objval = [objval;norm(A-Bi,'fro')];
        end

    %---%print information if necessary
        if verbose
            fprintf('-> Iteration %4i : Distance to the original matrix : %8.6e\n',itere,norm(A-Bi,'fro')*gamma)
            fprintf('                            Norm of the direction H : %3.2e\n',norm(H,'fro')*gamma)
            fprintf('                            Condition number for P  : %3.2e\n',condest(Dp))
            fprintf('                            Condition number for Q  : %3.2e\n',condest(Dq))
            %fprintf('                    Condition number for T : %3.2e\n',cond(T));
            la %#ok<NOPRT>
            %T %#ok<NOPRT>
            H %#ok<NOPRT>
            Bi %#ok<NOPRT>
%             eigenval1 = (2*inv(Dq)*(Dp.^2*ones(n,n)+ones(n,n)*Dp.^2)*inv(Dq)).^(-1/2)
        end
    end
    
    Bi = Bi*gamma;

    %opening figure for the evolution of the solution
    if compute
        stock = stock * gamma;
        Bmat = Bmat * gamma;
        objval = objval*gamma;
        e_lon = e_lon*gamma;
        close all
        plotevol(stock,e_lon,isdiscrete,roc,savf,path);
        objval = [min(objval);objval];
        save stock.mat stock Bmat objval
    end

    %displaying time
    time = toc;
    if verbose
        time
    end

catch
    toc
    %opening figure for the evolution of the solution
    err = lasterror;
    msgid = err.identifier;
    if compute
        if (strcmp(msgid,'control:InputArguments')) && (itere>1)
            stock(end,:) = [];
            Bmat(:,end) = [];
            objval(end) = [];
        end
        stock = stock * gamma;
        Bmat = Bmat*gamma;
        objval = objval*gamma;
        e_lon = e_lon*gamma;
        close all
        plotevol(stock,e_lon,isdiscrete,roc,savf,path)
        objval = [min(objval);objval];
        save stock.mat stock Bmat objval;
        display('Evolution of the Bi saved in stock.mat')
    end
%     if strcmp(msgid,'control:InputArguments')
%         Bi = Biprev*gamma;
%         warning('Could not achieve required precision'); %#ok<WNTAG>
%         warning('Returning the last stable matrix found.'); %#ok<WNTAG>
%         return
%     end
    rethrow(lasterror)
end

